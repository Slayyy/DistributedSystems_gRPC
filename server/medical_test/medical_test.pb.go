// Code generated by protoc-gen-go.
// source: medical_test.proto
// DO NOT EDIT!

/*
Package medical_test is a generated protocol buffer package.

It is generated from these files:
	medical_test.proto

It has these top-level messages:
	Person
	Patient
	Patients
	Doctor
	Doctors
	Technican
	Technicans
	MedicalTest
	MedicalTests
	AddMedicalTest
	FilterByIdRequest
	Id
	Status
*/
package medical_test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Person struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Person) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Person) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Patient struct {
	Person *Person `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
}

func (m *Patient) Reset()                    { *m = Patient{} }
func (m *Patient) String() string            { return proto.CompactTextString(m) }
func (*Patient) ProtoMessage()               {}
func (*Patient) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Patient) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type Patients struct {
	Patients []*Patient `protobuf:"bytes,1,rep,name=patients" json:"patients,omitempty"`
}

func (m *Patients) Reset()                    { *m = Patients{} }
func (m *Patients) String() string            { return proto.CompactTextString(m) }
func (*Patients) ProtoMessage()               {}
func (*Patients) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Patients) GetPatients() []*Patient {
	if m != nil {
		return m.Patients
	}
	return nil
}

type Doctor struct {
	Person *Person `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
}

func (m *Doctor) Reset()                    { *m = Doctor{} }
func (m *Doctor) String() string            { return proto.CompactTextString(m) }
func (*Doctor) ProtoMessage()               {}
func (*Doctor) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Doctor) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type Doctors struct {
	Doctors []*Doctor `protobuf:"bytes,1,rep,name=doctors" json:"doctors,omitempty"`
}

func (m *Doctors) Reset()                    { *m = Doctors{} }
func (m *Doctors) String() string            { return proto.CompactTextString(m) }
func (*Doctors) ProtoMessage()               {}
func (*Doctors) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Doctors) GetDoctors() []*Doctor {
	if m != nil {
		return m.Doctors
	}
	return nil
}

type Technican struct {
	Person *Person `protobuf:"bytes,1,opt,name=person" json:"person,omitempty"`
}

func (m *Technican) Reset()                    { *m = Technican{} }
func (m *Technican) String() string            { return proto.CompactTextString(m) }
func (*Technican) ProtoMessage()               {}
func (*Technican) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Technican) GetPerson() *Person {
	if m != nil {
		return m.Person
	}
	return nil
}

type Technicans struct {
	Technicans []*Technican `protobuf:"bytes,1,rep,name=technicans" json:"technicans,omitempty"`
}

func (m *Technicans) Reset()                    { *m = Technicans{} }
func (m *Technicans) String() string            { return proto.CompactTextString(m) }
func (*Technicans) ProtoMessage()               {}
func (*Technicans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Technicans) GetTechnicans() []*Technican {
	if m != nil {
		return m.Technicans
	}
	return nil
}

type MedicalTest struct {
	Id        int64             `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Patient   *Patient          `protobuf:"bytes,2,opt,name=patient" json:"patient,omitempty"`
	Doctor    *Doctor           `protobuf:"bytes,3,opt,name=doctor" json:"doctor,omitempty"`
	Technican *Technican        `protobuf:"bytes,4,opt,name=technican" json:"technican,omitempty"`
	Results   map[string]string `protobuf:"bytes,5,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MedicalTest) Reset()                    { *m = MedicalTest{} }
func (m *MedicalTest) String() string            { return proto.CompactTextString(m) }
func (*MedicalTest) ProtoMessage()               {}
func (*MedicalTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MedicalTest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MedicalTest) GetPatient() *Patient {
	if m != nil {
		return m.Patient
	}
	return nil
}

func (m *MedicalTest) GetDoctor() *Doctor {
	if m != nil {
		return m.Doctor
	}
	return nil
}

func (m *MedicalTest) GetTechnican() *Technican {
	if m != nil {
		return m.Technican
	}
	return nil
}

func (m *MedicalTest) GetResults() map[string]string {
	if m != nil {
		return m.Results
	}
	return nil
}

type MedicalTests struct {
	Tests []*MedicalTest `protobuf:"bytes,1,rep,name=tests" json:"tests,omitempty"`
}

func (m *MedicalTests) Reset()                    { *m = MedicalTests{} }
func (m *MedicalTests) String() string            { return proto.CompactTextString(m) }
func (*MedicalTests) ProtoMessage()               {}
func (*MedicalTests) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MedicalTests) GetTests() []*MedicalTest {
	if m != nil {
		return m.Tests
	}
	return nil
}

type AddMedicalTest struct {
	Doctor    int64             `protobuf:"varint,1,opt,name=doctor" json:"doctor,omitempty"`
	Patient   int64             `protobuf:"varint,2,opt,name=patient" json:"patient,omitempty"`
	Technican int64             `protobuf:"varint,3,opt,name=technican" json:"technican,omitempty"`
	Results   map[string]string `protobuf:"bytes,4,rep,name=results" json:"results,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *AddMedicalTest) Reset()                    { *m = AddMedicalTest{} }
func (m *AddMedicalTest) String() string            { return proto.CompactTextString(m) }
func (*AddMedicalTest) ProtoMessage()               {}
func (*AddMedicalTest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddMedicalTest) GetDoctor() int64 {
	if m != nil {
		return m.Doctor
	}
	return 0
}

func (m *AddMedicalTest) GetPatient() int64 {
	if m != nil {
		return m.Patient
	}
	return 0
}

func (m *AddMedicalTest) GetTechnican() int64 {
	if m != nil {
		return m.Technican
	}
	return 0
}

func (m *AddMedicalTest) GetResults() map[string]string {
	if m != nil {
		return m.Results
	}
	return nil
}

type FilterByIdRequest struct {
	Id       int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FilterId int64 `protobuf:"varint,2,opt,name=filterId" json:"filterId,omitempty"`
}

func (m *FilterByIdRequest) Reset()                    { *m = FilterByIdRequest{} }
func (m *FilterByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*FilterByIdRequest) ProtoMessage()               {}
func (*FilterByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FilterByIdRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FilterByIdRequest) GetFilterId() int64 {
	if m != nil {
		return m.FilterId
	}
	return 0
}

type Id struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Id) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Status struct {
	Status string `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Status) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Person)(nil), "Person")
	proto.RegisterType((*Patient)(nil), "Patient")
	proto.RegisterType((*Patients)(nil), "Patients")
	proto.RegisterType((*Doctor)(nil), "Doctor")
	proto.RegisterType((*Doctors)(nil), "Doctors")
	proto.RegisterType((*Technican)(nil), "Technican")
	proto.RegisterType((*Technicans)(nil), "Technicans")
	proto.RegisterType((*MedicalTest)(nil), "MedicalTest")
	proto.RegisterType((*MedicalTests)(nil), "MedicalTests")
	proto.RegisterType((*AddMedicalTest)(nil), "AddMedicalTest")
	proto.RegisterType((*FilterByIdRequest)(nil), "FilterByIdRequest")
	proto.RegisterType((*Id)(nil), "Id")
	proto.RegisterType((*Status)(nil), "Status")
}

func init() { proto.RegisterFile("medical_test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 583 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x5f, 0x6b, 0x1a, 0x4f,
	0x14, 0x75, 0xdd, 0xe8, 0xea, 0xd5, 0x18, 0x33, 0x84, 0xb0, 0x3f, 0x7f, 0x81, 0xda, 0xc1, 0x07,
	0x23, 0xb2, 0x84, 0x15, 0x8a, 0xe4, 0xa5, 0x58, 0x52, 0xc1, 0x87, 0x42, 0x98, 0x04, 0xfa, 0x58,
	0xb6, 0x3b, 0x53, 0x5c, 0xba, 0xd9, 0x35, 0x3b, 0x63, 0xc0, 0xcf, 0xd2, 0xaf, 0xd5, 0xaf, 0x53,
	0x28, 0xce, 0x9f, 0x75, 0xd4, 0x40, 0x9e, 0xfa, 0x76, 0x67, 0xce, 0xb9, 0xf7, 0x9e, 0x7b, 0xf6,
	0xce, 0x02, 0x7a, 0x62, 0x34, 0x89, 0xa3, 0xf4, 0x9b, 0x60, 0x5c, 0x04, 0xab, 0x22, 0x17, 0x39,
	0x1e, 0x43, 0xfd, 0x9e, 0x15, 0x3c, 0xcf, 0x50, 0x07, 0xaa, 0x09, 0xf5, 0x9d, 0xbe, 0x33, 0x74,
	0x49, 0x35, 0xa1, 0x08, 0xc1, 0x49, 0x16, 0x3d, 0x31, 0xbf, 0xda, 0x77, 0x86, 0x4d, 0x22, 0x63,
	0x3c, 0x02, 0xef, 0x3e, 0x12, 0x09, 0xcb, 0x04, 0x7a, 0x07, 0xf5, 0x95, 0x4c, 0x94, 0x29, 0xad,
	0xd0, 0x0b, 0x54, 0x1d, 0xa2, 0xaf, 0xf1, 0x0d, 0x34, 0x34, 0x97, 0xa3, 0x01, 0x34, 0x56, 0x3a,
	0xf6, 0x9d, 0xbe, 0x3b, 0x6c, 0x85, 0x8d, 0x40, 0x83, 0xa4, 0x44, 0xf0, 0x35, 0xd4, 0xef, 0xf2,
	0x58, 0xe4, 0xc5, 0xdb, 0xc5, 0xc7, 0xe0, 0x29, 0x2a, 0x47, 0xef, 0xc1, 0xa3, 0x2a, 0xd4, 0xa5,
	0xbd, 0x40, 0x41, 0xc4, 0xdc, 0xe3, 0x31, 0x34, 0x1f, 0x59, 0xbc, 0xcc, 0x92, 0x38, 0xca, 0xde,
	0xae, 0x3d, 0x05, 0x28, 0xd9, 0x1c, 0x8d, 0x00, 0x44, 0x79, 0xd2, 0x1d, 0x20, 0x28, 0x09, 0xc4,
	0x42, 0xf1, 0x1f, 0x07, 0x5a, 0x5f, 0x94, 0xc7, 0x8f, 0x8c, 0x8b, 0x23, 0x4b, 0x31, 0x78, 0x7a,
	0x58, 0xe9, 0xaa, 0xed, 0x82, 0x01, 0xb6, 0xf2, 0x94, 0x6c, 0xdf, 0xd5, 0xf2, 0xf4, 0x34, 0xfa,
	0x1a, 0x0d, 0xa1, 0x59, 0xb6, 0xf4, 0x4f, 0x24, 0xc7, 0xd6, 0xb3, 0x03, 0xd1, 0x04, 0xbc, 0x82,
	0xf1, 0x75, 0x2a, 0xb8, 0x5f, 0x93, 0xba, 0xff, 0x0b, 0x2c, 0x75, 0x01, 0x51, 0xd8, 0xe7, 0x4c,
	0x14, 0x1b, 0x62, 0x98, 0xbd, 0x5b, 0x68, 0xdb, 0x00, 0xea, 0x82, 0xfb, 0x93, 0x6d, 0xe4, 0x10,
	0x4d, 0xb2, 0x0d, 0xd1, 0x05, 0xd4, 0x5e, 0xa2, 0x74, 0x6d, 0x36, 0x43, 0x1d, 0x6e, 0xab, 0x53,
	0x07, 0x87, 0xd0, 0xb6, 0x1a, 0x70, 0x84, 0xa1, 0xb6, 0x5d, 0x35, 0x63, 0x5b, 0xdb, 0x6e, 0x4f,
	0x14, 0x84, 0x7f, 0x3b, 0xd0, 0x99, 0x51, 0x6a, 0xdb, 0x76, 0x59, 0x5a, 0xa0, 0xac, 0x33, 0x93,
	0xfb, 0xfb, 0xf6, 0xb9, 0x3b, 0xd3, 0xae, 0x6c, 0x4f, 0x5c, 0x89, 0x59, 0x3e, 0x7c, 0xd8, 0xf9,
	0x70, 0x22, 0x85, 0x5c, 0x05, 0xfb, 0x1d, 0xff, 0x81, 0x15, 0x1f, 0xe1, 0x7c, 0x9e, 0xa4, 0x82,
	0x15, 0x9f, 0x36, 0x0b, 0x4a, 0xd8, 0xf3, 0xfa, 0xb5, 0x7d, 0xe8, 0x41, 0xe3, 0x87, 0x24, 0x2d,
	0xa8, 0x9e, 0xa8, 0x3c, 0xe3, 0x0b, 0xa8, 0x2e, 0xe8, 0x61, 0x06, 0xee, 0x43, 0xfd, 0x41, 0x44,
	0x62, 0xcd, 0xb7, 0x26, 0x71, 0x19, 0x69, 0x3d, 0xfa, 0x14, 0x46, 0xd0, 0xd1, 0x3b, 0xf5, 0xc0,
	0x8a, 0x97, 0x24, 0x66, 0xe8, 0x1a, 0xce, 0xe6, 0x4c, 0xc4, 0xcb, 0x59, 0x9a, 0xea, 0x71, 0x90,
	0x1b, 0x2c, 0x68, 0xef, 0xd4, 0xfe, 0x1c, 0x1c, 0x57, 0x6e, 0x1c, 0x34, 0x80, 0x73, 0x49, 0x55,
	0x2f, 0x22, 0x4a, 0xef, 0x22, 0x11, 0x29, 0x72, 0xb9, 0xa9, 0xb8, 0x12, 0xfe, 0x72, 0xe0, 0x54,
	0x2d, 0xa5, 0x69, 0x31, 0x80, 0xae, 0x69, 0x51, 0xbe, 0x79, 0x99, 0xd6, 0x34, 0x69, 0x1c, 0x57,
	0xd0, 0x08, 0x2e, 0x55, 0x75, 0x7d, 0x35, 0xcf, 0x0b, 0xfd, 0xde, 0x8f, 0xb9, 0x53, 0x40, 0x92,
	0xab, 0x15, 0x7f, 0x4d, 0xc4, 0x72, 0x41, 0x11, 0x0a, 0x8e, 0x4c, 0xed, 0xed, 0x6d, 0x15, 0xae,
	0x84, 0xcf, 0xd0, 0x2d, 0x5f, 0x83, 0xd1, 0x37, 0x04, 0x98, 0x51, 0x6a, 0xa6, 0x3f, 0x3b, 0xf8,
	0xfc, 0x3d, 0x2f, 0x50, 0xa6, 0xe2, 0x0a, 0x9a, 0xc0, 0xff, 0x07, 0x66, 0xcd, 0xf3, 0x62, 0xf7,
	0xf3, 0x78, 0xd5, 0xb8, 0xef, 0x75, 0xf9, 0x2f, 0x9d, 0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x17,
	0xaf, 0x52, 0x7a, 0x61, 0x05, 0x00, 0x00,
}
