# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import medical_test_pb2 as medical__test__pb2


class PatientServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.FetchAllResults = channel.unary_stream(
        '/PatientService/FetchAllResults',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTest.FromString,
        )


class PatientServiceServicer(object):

  def FetchAllResults(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PatientServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'FetchAllResults': grpc.unary_stream_rpc_method_handler(
          servicer.FetchAllResults,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.MedicalTest.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PatientService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DoctorServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.FetchAllResults = channel.unary_stream(
        '/DoctorService/FetchAllResults',
        request_serializer=medical__test__pb2.Empty.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTest.FromString,
        )
    self.FetchResults = channel.unary_unary(
        '/DoctorService/FetchResults',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTest.FromString,
        )
    self.FetchOnIdParity = channel.unary_stream(
        '/DoctorService/FetchOnIdParity',
        request_serializer=medical__test__pb2.FilterEvenId.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTest.FromString,
        )


class DoctorServiceServicer(object):

  def FetchAllResults(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchResults(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchOnIdParity(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DoctorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'FetchAllResults': grpc.unary_stream_rpc_method_handler(
          servicer.FetchAllResults,
          request_deserializer=medical__test__pb2.Empty.FromString,
          response_serializer=medical__test__pb2.MedicalTest.SerializeToString,
      ),
      'FetchResults': grpc.unary_unary_rpc_method_handler(
          servicer.FetchResults,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.MedicalTest.SerializeToString,
      ),
      'FetchOnIdParity': grpc.unary_stream_rpc_method_handler(
          servicer.FetchOnIdParity,
          request_deserializer=medical__test__pb2.FilterEvenId.FromString,
          response_serializer=medical__test__pb2.MedicalTest.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DoctorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TechnicianServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddResults = channel.unary_unary(
        '/TechnicianService/AddResults',
        request_serializer=medical__test__pb2.NewMedTestRequest.SerializeToString,
        response_deserializer=medical__test__pb2.Status.FromString,
        )


class TechnicianServiceServicer(object):

  def AddResults(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TechnicianServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddResults': grpc.unary_unary_rpc_method_handler(
          servicer.AddResults,
          request_deserializer=medical__test__pb2.NewMedTestRequest.FromString,
          response_serializer=medical__test__pb2.Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TechnicianService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DbServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.NewPatient = channel.unary_unary(
        '/DbService/NewPatient',
        request_serializer=medical__test__pb2.Person.SerializeToString,
        response_deserializer=medical__test__pb2.Patient.FromString,
        )
    self.NewDoctor = channel.unary_unary(
        '/DbService/NewDoctor',
        request_serializer=medical__test__pb2.Person.SerializeToString,
        response_deserializer=medical__test__pb2.Doctor.FromString,
        )
    self.NewTechnician = channel.unary_unary(
        '/DbService/NewTechnician',
        request_serializer=medical__test__pb2.Person.SerializeToString,
        response_deserializer=medical__test__pb2.Technician.FromString,
        )
    self.FetchPatients = channel.unary_stream(
        '/DbService/FetchPatients',
        request_serializer=medical__test__pb2.Empty.SerializeToString,
        response_deserializer=medical__test__pb2.Patient.FromString,
        )
    self.FetchDoctors = channel.unary_stream(
        '/DbService/FetchDoctors',
        request_serializer=medical__test__pb2.Empty.SerializeToString,
        response_deserializer=medical__test__pb2.Doctor.FromString,
        )
    self.FetchTechnicians = channel.unary_stream(
        '/DbService/FetchTechnicians',
        request_serializer=medical__test__pb2.Empty.SerializeToString,
        response_deserializer=medical__test__pb2.Technician.FromString,
        )


class DbServiceServicer(object):

  def NewPatient(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NewDoctor(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NewTechnician(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchPatients(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchDoctors(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchTechnicians(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DbServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'NewPatient': grpc.unary_unary_rpc_method_handler(
          servicer.NewPatient,
          request_deserializer=medical__test__pb2.Person.FromString,
          response_serializer=medical__test__pb2.Patient.SerializeToString,
      ),
      'NewDoctor': grpc.unary_unary_rpc_method_handler(
          servicer.NewDoctor,
          request_deserializer=medical__test__pb2.Person.FromString,
          response_serializer=medical__test__pb2.Doctor.SerializeToString,
      ),
      'NewTechnician': grpc.unary_unary_rpc_method_handler(
          servicer.NewTechnician,
          request_deserializer=medical__test__pb2.Person.FromString,
          response_serializer=medical__test__pb2.Technician.SerializeToString,
      ),
      'FetchPatients': grpc.unary_stream_rpc_method_handler(
          servicer.FetchPatients,
          request_deserializer=medical__test__pb2.Empty.FromString,
          response_serializer=medical__test__pb2.Patient.SerializeToString,
      ),
      'FetchDoctors': grpc.unary_stream_rpc_method_handler(
          servicer.FetchDoctors,
          request_deserializer=medical__test__pb2.Empty.FromString,
          response_serializer=medical__test__pb2.Doctor.SerializeToString,
      ),
      'FetchTechnicians': grpc.unary_stream_rpc_method_handler(
          servicer.FetchTechnicians,
          request_deserializer=medical__test__pb2.Empty.FromString,
          response_serializer=medical__test__pb2.Technician.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DbService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
