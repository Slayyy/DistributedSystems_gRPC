# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: medical_test.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='medical_test.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x12medical_test.proto\"\"\n\x06Person\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\"\"\n\x07Patient\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"!\n\x06\x44octor\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"%\n\nTechnician\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"\xca\x01\n\x0bMedicalTest\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x19\n\x07patient\x18\x02 \x01(\x0b\x32\x08.Patient\x12\x17\n\x06\x64octor\x18\x03 \x01(\x0b\x32\x07.Doctor\x12\x1f\n\ntechnician\x18\x04 \x01(\x0b\x32\x0b.Technician\x12*\n\x07results\x18\x05 \x03(\x0b\x32\x19.MedicalTest.ResultsEntry\x1a.\n\x0cResultsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\xaa\x01\n\x11NewMedTestRequest\x12\x0e\n\x06\x64octor\x18\x01 \x01(\x03\x12\x0f\n\x07patient\x18\x02 \x01(\x03\x12\x12\n\ntechnician\x18\x03 \x01(\x03\x12\x30\n\x07results\x18\x04 \x03(\x0b\x32\x1f.NewMedTestRequest.ResultsEntry\x1a.\n\x0cResultsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x1e\n\x0c\x46ilterEvenId\x12\x0e\n\x06isEven\x18\x01 \x01(\x08\"\x10\n\x02Id\x12\n\n\x02id\x18\x01 \x01(\x03\"\x18\n\x06Status\x12\x0e\n\x06status\x18\x01 \x01(\t\"\x07\n\x05\x45mpty2:\n\x0ePatientService\x12(\n\x0f\x46\x65tchAllResults\x12\x03.Id\x1a\x0c.MedicalTest\"\x00\x30\x01\x32\x95\x01\n\rDoctorService\x12+\n\x0f\x46\x65tchAllResults\x12\x06.Empty\x1a\x0c.MedicalTest\"\x00\x30\x01\x12#\n\x0c\x46\x65tchResults\x12\x03.Id\x1a\x0c.MedicalTest\"\x00\x12\x32\n\x0f\x46\x65tchOnIdParity\x12\r.FilterEvenId\x1a\x0c.MedicalTest\"\x00\x30\x01\x32@\n\x11TechnicianService\x12+\n\nAddResults\x12\x12.NewMedTestRequest\x1a\x07.Status\"\x00\x32\xf1\x01\n\tDbService\x12!\n\nNewPatient\x12\x07.Person\x1a\x08.Patient\"\x00\x12\x1f\n\tNewDoctor\x12\x07.Person\x1a\x07.Doctor\"\x00\x12\'\n\rNewTechnician\x12\x07.Person\x1a\x0b.Technician\"\x00\x12%\n\rFetchPatients\x12\x06.Empty\x1a\x08.Patient\"\x00\x30\x01\x12#\n\x0c\x46\x65tchDoctors\x12\x06.Empty\x1a\x07.Doctor\"\x00\x30\x01\x12+\n\x10\x46\x65tchTechnicians\x12\x06.Empty\x1a\x0b.Technician\"\x00\x30\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PERSON = _descriptor.Descriptor(
  name='Person',
  full_name='Person',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='Person.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='Person.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=56,
)


_PATIENT = _descriptor.Descriptor(
  name='Patient',
  full_name='Patient',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Patient.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=58,
  serialized_end=92,
)


_DOCTOR = _descriptor.Descriptor(
  name='Doctor',
  full_name='Doctor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Doctor.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=94,
  serialized_end=127,
)


_TECHNICIAN = _descriptor.Descriptor(
  name='Technician',
  full_name='Technician',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Technician.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=129,
  serialized_end=166,
)


_MEDICALTEST_RESULTSENTRY = _descriptor.Descriptor(
  name='ResultsEntry',
  full_name='MedicalTest.ResultsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='MedicalTest.ResultsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='MedicalTest.ResultsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=325,
  serialized_end=371,
)

_MEDICALTEST = _descriptor.Descriptor(
  name='MedicalTest',
  full_name='MedicalTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='MedicalTest.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='MedicalTest.patient', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='doctor', full_name='MedicalTest.doctor', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='technician', full_name='MedicalTest.technician', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='MedicalTest.results', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_MEDICALTEST_RESULTSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=169,
  serialized_end=371,
)


_NEWMEDTESTREQUEST_RESULTSENTRY = _descriptor.Descriptor(
  name='ResultsEntry',
  full_name='NewMedTestRequest.ResultsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='NewMedTestRequest.ResultsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='NewMedTestRequest.ResultsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=325,
  serialized_end=371,
)

_NEWMEDTESTREQUEST = _descriptor.Descriptor(
  name='NewMedTestRequest',
  full_name='NewMedTestRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='doctor', full_name='NewMedTestRequest.doctor', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='NewMedTestRequest.patient', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='technician', full_name='NewMedTestRequest.technician', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='NewMedTestRequest.results', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_NEWMEDTESTREQUEST_RESULTSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=374,
  serialized_end=544,
)


_FILTEREVENID = _descriptor.Descriptor(
  name='FilterEvenId',
  full_name='FilterEvenId',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='isEven', full_name='FilterEvenId.isEven', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=546,
  serialized_end=576,
)


_ID = _descriptor.Descriptor(
  name='Id',
  full_name='Id',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='Id.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=578,
  serialized_end=594,
)


_STATUS = _descriptor.Descriptor(
  name='Status',
  full_name='Status',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='Status.status', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=596,
  serialized_end=620,
)


_EMPTY = _descriptor.Descriptor(
  name='Empty',
  full_name='Empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=622,
  serialized_end=629,
)

_PATIENT.fields_by_name['person'].message_type = _PERSON
_DOCTOR.fields_by_name['person'].message_type = _PERSON
_TECHNICIAN.fields_by_name['person'].message_type = _PERSON
_MEDICALTEST_RESULTSENTRY.containing_type = _MEDICALTEST
_MEDICALTEST.fields_by_name['patient'].message_type = _PATIENT
_MEDICALTEST.fields_by_name['doctor'].message_type = _DOCTOR
_MEDICALTEST.fields_by_name['technician'].message_type = _TECHNICIAN
_MEDICALTEST.fields_by_name['results'].message_type = _MEDICALTEST_RESULTSENTRY
_NEWMEDTESTREQUEST_RESULTSENTRY.containing_type = _NEWMEDTESTREQUEST
_NEWMEDTESTREQUEST.fields_by_name['results'].message_type = _NEWMEDTESTREQUEST_RESULTSENTRY
DESCRIPTOR.message_types_by_name['Person'] = _PERSON
DESCRIPTOR.message_types_by_name['Patient'] = _PATIENT
DESCRIPTOR.message_types_by_name['Doctor'] = _DOCTOR
DESCRIPTOR.message_types_by_name['Technician'] = _TECHNICIAN
DESCRIPTOR.message_types_by_name['MedicalTest'] = _MEDICALTEST
DESCRIPTOR.message_types_by_name['NewMedTestRequest'] = _NEWMEDTESTREQUEST
DESCRIPTOR.message_types_by_name['FilterEvenId'] = _FILTEREVENID
DESCRIPTOR.message_types_by_name['Id'] = _ID
DESCRIPTOR.message_types_by_name['Status'] = _STATUS
DESCRIPTOR.message_types_by_name['Empty'] = _EMPTY

Person = _reflection.GeneratedProtocolMessageType('Person', (_message.Message,), dict(
  DESCRIPTOR = _PERSON,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Person)
  ))
_sym_db.RegisterMessage(Person)

Patient = _reflection.GeneratedProtocolMessageType('Patient', (_message.Message,), dict(
  DESCRIPTOR = _PATIENT,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Patient)
  ))
_sym_db.RegisterMessage(Patient)

Doctor = _reflection.GeneratedProtocolMessageType('Doctor', (_message.Message,), dict(
  DESCRIPTOR = _DOCTOR,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Doctor)
  ))
_sym_db.RegisterMessage(Doctor)

Technician = _reflection.GeneratedProtocolMessageType('Technician', (_message.Message,), dict(
  DESCRIPTOR = _TECHNICIAN,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Technician)
  ))
_sym_db.RegisterMessage(Technician)

MedicalTest = _reflection.GeneratedProtocolMessageType('MedicalTest', (_message.Message,), dict(

  ResultsEntry = _reflection.GeneratedProtocolMessageType('ResultsEntry', (_message.Message,), dict(
    DESCRIPTOR = _MEDICALTEST_RESULTSENTRY,
    __module__ = 'medical_test_pb2'
    # @@protoc_insertion_point(class_scope:MedicalTest.ResultsEntry)
    ))
  ,
  DESCRIPTOR = _MEDICALTEST,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:MedicalTest)
  ))
_sym_db.RegisterMessage(MedicalTest)
_sym_db.RegisterMessage(MedicalTest.ResultsEntry)

NewMedTestRequest = _reflection.GeneratedProtocolMessageType('NewMedTestRequest', (_message.Message,), dict(

  ResultsEntry = _reflection.GeneratedProtocolMessageType('ResultsEntry', (_message.Message,), dict(
    DESCRIPTOR = _NEWMEDTESTREQUEST_RESULTSENTRY,
    __module__ = 'medical_test_pb2'
    # @@protoc_insertion_point(class_scope:NewMedTestRequest.ResultsEntry)
    ))
  ,
  DESCRIPTOR = _NEWMEDTESTREQUEST,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:NewMedTestRequest)
  ))
_sym_db.RegisterMessage(NewMedTestRequest)
_sym_db.RegisterMessage(NewMedTestRequest.ResultsEntry)

FilterEvenId = _reflection.GeneratedProtocolMessageType('FilterEvenId', (_message.Message,), dict(
  DESCRIPTOR = _FILTEREVENID,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:FilterEvenId)
  ))
_sym_db.RegisterMessage(FilterEvenId)

Id = _reflection.GeneratedProtocolMessageType('Id', (_message.Message,), dict(
  DESCRIPTOR = _ID,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Id)
  ))
_sym_db.RegisterMessage(Id)

Status = _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), dict(
  DESCRIPTOR = _STATUS,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Status)
  ))
_sym_db.RegisterMessage(Status)

Empty = _reflection.GeneratedProtocolMessageType('Empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Empty)
  ))
_sym_db.RegisterMessage(Empty)


_MEDICALTEST_RESULTSENTRY.has_options = True
_MEDICALTEST_RESULTSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_NEWMEDTESTREQUEST_RESULTSENTRY.has_options = True
_NEWMEDTESTREQUEST_RESULTSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PatientServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.FetchAllResults = channel.unary_stream(
          '/PatientService/FetchAllResults',
          request_serializer=Id.SerializeToString,
          response_deserializer=MedicalTest.FromString,
          )


  class PatientServiceServicer(object):

    def FetchAllResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PatientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'FetchAllResults': grpc.unary_stream_rpc_method_handler(
            servicer.FetchAllResults,
            request_deserializer=Id.FromString,
            response_serializer=MedicalTest.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PatientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class DoctorServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.FetchAllResults = channel.unary_stream(
          '/DoctorService/FetchAllResults',
          request_serializer=Empty.SerializeToString,
          response_deserializer=MedicalTest.FromString,
          )
      self.FetchResults = channel.unary_unary(
          '/DoctorService/FetchResults',
          request_serializer=Id.SerializeToString,
          response_deserializer=MedicalTest.FromString,
          )
      self.FetchOnIdParity = channel.unary_stream(
          '/DoctorService/FetchOnIdParity',
          request_serializer=FilterEvenId.SerializeToString,
          response_deserializer=MedicalTest.FromString,
          )


  class DoctorServiceServicer(object):

    def FetchAllResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchOnIdParity(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DoctorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'FetchAllResults': grpc.unary_stream_rpc_method_handler(
            servicer.FetchAllResults,
            request_deserializer=Empty.FromString,
            response_serializer=MedicalTest.SerializeToString,
        ),
        'FetchResults': grpc.unary_unary_rpc_method_handler(
            servicer.FetchResults,
            request_deserializer=Id.FromString,
            response_serializer=MedicalTest.SerializeToString,
        ),
        'FetchOnIdParity': grpc.unary_stream_rpc_method_handler(
            servicer.FetchOnIdParity,
            request_deserializer=FilterEvenId.FromString,
            response_serializer=MedicalTest.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DoctorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class TechnicianServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddResults = channel.unary_unary(
          '/TechnicianService/AddResults',
          request_serializer=NewMedTestRequest.SerializeToString,
          response_deserializer=Status.FromString,
          )


  class TechnicianServiceServicer(object):

    def AddResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TechnicianServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddResults': grpc.unary_unary_rpc_method_handler(
            servicer.AddResults,
            request_deserializer=NewMedTestRequest.FromString,
            response_serializer=Status.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'TechnicianService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class DbServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.NewPatient = channel.unary_unary(
          '/DbService/NewPatient',
          request_serializer=Person.SerializeToString,
          response_deserializer=Patient.FromString,
          )
      self.NewDoctor = channel.unary_unary(
          '/DbService/NewDoctor',
          request_serializer=Person.SerializeToString,
          response_deserializer=Doctor.FromString,
          )
      self.NewTechnician = channel.unary_unary(
          '/DbService/NewTechnician',
          request_serializer=Person.SerializeToString,
          response_deserializer=Technician.FromString,
          )
      self.FetchPatients = channel.unary_stream(
          '/DbService/FetchPatients',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Patient.FromString,
          )
      self.FetchDoctors = channel.unary_stream(
          '/DbService/FetchDoctors',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Doctor.FromString,
          )
      self.FetchTechnicians = channel.unary_stream(
          '/DbService/FetchTechnicians',
          request_serializer=Empty.SerializeToString,
          response_deserializer=Technician.FromString,
          )


  class DbServiceServicer(object):

    def NewPatient(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def NewDoctor(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def NewTechnician(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchPatients(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchDoctors(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchTechnicians(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DbServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'NewPatient': grpc.unary_unary_rpc_method_handler(
            servicer.NewPatient,
            request_deserializer=Person.FromString,
            response_serializer=Patient.SerializeToString,
        ),
        'NewDoctor': grpc.unary_unary_rpc_method_handler(
            servicer.NewDoctor,
            request_deserializer=Person.FromString,
            response_serializer=Doctor.SerializeToString,
        ),
        'NewTechnician': grpc.unary_unary_rpc_method_handler(
            servicer.NewTechnician,
            request_deserializer=Person.FromString,
            response_serializer=Technician.SerializeToString,
        ),
        'FetchPatients': grpc.unary_stream_rpc_method_handler(
            servicer.FetchPatients,
            request_deserializer=Empty.FromString,
            response_serializer=Patient.SerializeToString,
        ),
        'FetchDoctors': grpc.unary_stream_rpc_method_handler(
            servicer.FetchDoctors,
            request_deserializer=Empty.FromString,
            response_serializer=Doctor.SerializeToString,
        ),
        'FetchTechnicians': grpc.unary_stream_rpc_method_handler(
            servicer.FetchTechnicians,
            request_deserializer=Empty.FromString,
            response_serializer=Technician.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DbService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPatientServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPatientServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_PatientService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PatientService', 'FetchAllResults'): Id.FromString,
    }
    response_serializers = {
      ('PatientService', 'FetchAllResults'): MedicalTest.SerializeToString,
    }
    method_implementations = {
      ('PatientService', 'FetchAllResults'): face_utilities.unary_stream_inline(servicer.FetchAllResults),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PatientService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PatientService', 'FetchAllResults'): Id.SerializeToString,
    }
    response_deserializers = {
      ('PatientService', 'FetchAllResults'): MedicalTest.FromString,
    }
    cardinalities = {
      'FetchAllResults': cardinality.Cardinality.UNARY_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PatientService', cardinalities, options=stub_options)


  class BetaDoctorServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchOnIdParity(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDoctorServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def FetchResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FetchResults.future = None
    def FetchOnIdParity(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_DoctorService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('DoctorService', 'FetchAllResults'): Empty.FromString,
      ('DoctorService', 'FetchOnIdParity'): FilterEvenId.FromString,
      ('DoctorService', 'FetchResults'): Id.FromString,
    }
    response_serializers = {
      ('DoctorService', 'FetchAllResults'): MedicalTest.SerializeToString,
      ('DoctorService', 'FetchOnIdParity'): MedicalTest.SerializeToString,
      ('DoctorService', 'FetchResults'): MedicalTest.SerializeToString,
    }
    method_implementations = {
      ('DoctorService', 'FetchAllResults'): face_utilities.unary_stream_inline(servicer.FetchAllResults),
      ('DoctorService', 'FetchOnIdParity'): face_utilities.unary_stream_inline(servicer.FetchOnIdParity),
      ('DoctorService', 'FetchResults'): face_utilities.unary_unary_inline(servicer.FetchResults),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DoctorService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('DoctorService', 'FetchAllResults'): Empty.SerializeToString,
      ('DoctorService', 'FetchOnIdParity'): FilterEvenId.SerializeToString,
      ('DoctorService', 'FetchResults'): Id.SerializeToString,
    }
    response_deserializers = {
      ('DoctorService', 'FetchAllResults'): MedicalTest.FromString,
      ('DoctorService', 'FetchOnIdParity'): MedicalTest.FromString,
      ('DoctorService', 'FetchResults'): MedicalTest.FromString,
    }
    cardinalities = {
      'FetchAllResults': cardinality.Cardinality.UNARY_STREAM,
      'FetchOnIdParity': cardinality.Cardinality.UNARY_STREAM,
      'FetchResults': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'DoctorService', cardinalities, options=stub_options)


  class BetaTechnicianServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTechnicianServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddResults.future = None


  def beta_create_TechnicianService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('TechnicianService', 'AddResults'): NewMedTestRequest.FromString,
    }
    response_serializers = {
      ('TechnicianService', 'AddResults'): Status.SerializeToString,
    }
    method_implementations = {
      ('TechnicianService', 'AddResults'): face_utilities.unary_unary_inline(servicer.AddResults),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TechnicianService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('TechnicianService', 'AddResults'): NewMedTestRequest.SerializeToString,
    }
    response_deserializers = {
      ('TechnicianService', 'AddResults'): Status.FromString,
    }
    cardinalities = {
      'AddResults': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'TechnicianService', cardinalities, options=stub_options)


  class BetaDbServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def NewPatient(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def NewDoctor(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def NewTechnician(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchPatients(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchDoctors(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchTechnicians(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDbServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def NewPatient(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    NewPatient.future = None
    def NewDoctor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    NewDoctor.future = None
    def NewTechnician(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    NewTechnician.future = None
    def FetchPatients(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def FetchDoctors(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def FetchTechnicians(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()


  def beta_create_DbService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('DbService', 'FetchDoctors'): Empty.FromString,
      ('DbService', 'FetchPatients'): Empty.FromString,
      ('DbService', 'FetchTechnicians'): Empty.FromString,
      ('DbService', 'NewDoctor'): Person.FromString,
      ('DbService', 'NewPatient'): Person.FromString,
      ('DbService', 'NewTechnician'): Person.FromString,
    }
    response_serializers = {
      ('DbService', 'FetchDoctors'): Doctor.SerializeToString,
      ('DbService', 'FetchPatients'): Patient.SerializeToString,
      ('DbService', 'FetchTechnicians'): Technician.SerializeToString,
      ('DbService', 'NewDoctor'): Doctor.SerializeToString,
      ('DbService', 'NewPatient'): Patient.SerializeToString,
      ('DbService', 'NewTechnician'): Technician.SerializeToString,
    }
    method_implementations = {
      ('DbService', 'FetchDoctors'): face_utilities.unary_stream_inline(servicer.FetchDoctors),
      ('DbService', 'FetchPatients'): face_utilities.unary_stream_inline(servicer.FetchPatients),
      ('DbService', 'FetchTechnicians'): face_utilities.unary_stream_inline(servicer.FetchTechnicians),
      ('DbService', 'NewDoctor'): face_utilities.unary_unary_inline(servicer.NewDoctor),
      ('DbService', 'NewPatient'): face_utilities.unary_unary_inline(servicer.NewPatient),
      ('DbService', 'NewTechnician'): face_utilities.unary_unary_inline(servicer.NewTechnician),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DbService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('DbService', 'FetchDoctors'): Empty.SerializeToString,
      ('DbService', 'FetchPatients'): Empty.SerializeToString,
      ('DbService', 'FetchTechnicians'): Empty.SerializeToString,
      ('DbService', 'NewDoctor'): Person.SerializeToString,
      ('DbService', 'NewPatient'): Person.SerializeToString,
      ('DbService', 'NewTechnician'): Person.SerializeToString,
    }
    response_deserializers = {
      ('DbService', 'FetchDoctors'): Doctor.FromString,
      ('DbService', 'FetchPatients'): Patient.FromString,
      ('DbService', 'FetchTechnicians'): Technician.FromString,
      ('DbService', 'NewDoctor'): Doctor.FromString,
      ('DbService', 'NewPatient'): Patient.FromString,
      ('DbService', 'NewTechnician'): Technician.FromString,
    }
    cardinalities = {
      'FetchDoctors': cardinality.Cardinality.UNARY_STREAM,
      'FetchPatients': cardinality.Cardinality.UNARY_STREAM,
      'FetchTechnicians': cardinality.Cardinality.UNARY_STREAM,
      'NewDoctor': cardinality.Cardinality.UNARY_UNARY,
      'NewPatient': cardinality.Cardinality.UNARY_UNARY,
      'NewTechnician': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'DbService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
