# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: medical_test.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='medical_test.proto',
  package='',
  syntax='proto3',
  serialized_pb=_b('\n\x12medical_test.proto\"\"\n\x06Person\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\"\"\n\x07Patient\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"&\n\x08Patients\x12\x1a\n\x08patients\x18\x01 \x03(\x0b\x32\x08.Patient\"!\n\x06\x44octor\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\"#\n\x07\x44octors\x12\x18\n\x07\x64octors\x18\x01 \x03(\x0b\x32\x07.Doctor\"$\n\tTechnican\x12\x17\n\x06person\x18\x01 \x01(\x0b\x32\x07.Person\",\n\nTechnicans\x12\x1e\n\ntechnicans\x18\x01 \x03(\x0b\x32\n.Technican\"\xc8\x01\n\x0bMedicalTest\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x19\n\x07patient\x18\x02 \x01(\x0b\x32\x08.Patient\x12\x17\n\x06\x64octor\x18\x03 \x01(\x0b\x32\x07.Doctor\x12\x1d\n\ttechnican\x18\x04 \x01(\x0b\x32\n.Technican\x12*\n\x07results\x18\x05 \x03(\x0b\x32\x19.MedicalTest.ResultsEntry\x1a.\n\x0cResultsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"+\n\x0cMedicalTests\x12\x1b\n\x05tests\x18\x01 \x03(\x0b\x32\x0c.MedicalTest\"\xa3\x01\n\x0e\x41\x64\x64MedicalTest\x12\x0e\n\x06\x64octor\x18\x01 \x01(\x03\x12\x0f\n\x07patient\x18\x02 \x01(\x03\x12\x11\n\ttechnican\x18\x03 \x01(\x03\x12-\n\x07results\x18\x04 \x03(\x0b\x32\x1c.AddMedicalTest.ResultsEntry\x1a.\n\x0cResultsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"1\n\x11\x46ilterByIdRequest\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x10\n\x08\x66ilterId\x18\x02 \x01(\x03\"\x10\n\x02Id\x12\n\n\x02id\x18\x01 \x01(\x03\"\x18\n\x06Status\x12\x0e\n\x06status\x18\x01 \x01(\t2a\n\x0ePatientService\x12)\n\x0f\x46\x65tchAllResults\x12\x03.Id\x1a\r.MedicalTests\"\x00\x30\x01\x12$\n\x11\x46\x65tchPersonalData\x12\x03.Id\x1a\x08.Patient\"\x00\x32\x9b\x01\n\rDoctorService\x12$\n\x10\x46\x65tchAllPatients\x12\x03.Id\x1a\t.Patients\"\x00\x12*\n\x16\x46\x65tchPatientsForDoctor\x12\x03.Id\x1a\t.Patients\"\x00\x12\x38\n\x12\x46\x65tchResultsWithId\x12\x12.FilterByIdRequest\x1a\x0c.MedicalTest\"\x00\x32q\n\x10TechnicanService\x12(\n\nAddResults\x12\x0f.AddMedicalTest\x1a\x07.Status\"\x00\x12\x33\n\x1b\x46\x65tchAllResultsForTechnican\x12\x03.Id\x1a\r.MedicalTests\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_PERSON = _descriptor.Descriptor(
  name='Person',
  full_name='Person',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='Person.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='Person.name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=22,
  serialized_end=56,
)


_PATIENT = _descriptor.Descriptor(
  name='Patient',
  full_name='Patient',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Patient.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=58,
  serialized_end=92,
)


_PATIENTS = _descriptor.Descriptor(
  name='Patients',
  full_name='Patients',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='patients', full_name='Patients.patients', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=94,
  serialized_end=132,
)


_DOCTOR = _descriptor.Descriptor(
  name='Doctor',
  full_name='Doctor',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Doctor.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=134,
  serialized_end=167,
)


_DOCTORS = _descriptor.Descriptor(
  name='Doctors',
  full_name='Doctors',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='doctors', full_name='Doctors.doctors', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=169,
  serialized_end=204,
)


_TECHNICAN = _descriptor.Descriptor(
  name='Technican',
  full_name='Technican',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='person', full_name='Technican.person', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=206,
  serialized_end=242,
)


_TECHNICANS = _descriptor.Descriptor(
  name='Technicans',
  full_name='Technicans',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='technicans', full_name='Technicans.technicans', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=244,
  serialized_end=288,
)


_MEDICALTEST_RESULTSENTRY = _descriptor.Descriptor(
  name='ResultsEntry',
  full_name='MedicalTest.ResultsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='MedicalTest.ResultsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='MedicalTest.ResultsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=445,
  serialized_end=491,
)

_MEDICALTEST = _descriptor.Descriptor(
  name='MedicalTest',
  full_name='MedicalTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='MedicalTest.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='MedicalTest.patient', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='doctor', full_name='MedicalTest.doctor', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='technican', full_name='MedicalTest.technican', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='MedicalTest.results', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_MEDICALTEST_RESULTSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=291,
  serialized_end=491,
)


_MEDICALTESTS = _descriptor.Descriptor(
  name='MedicalTests',
  full_name='MedicalTests',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='tests', full_name='MedicalTests.tests', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=493,
  serialized_end=536,
)


_ADDMEDICALTEST_RESULTSENTRY = _descriptor.Descriptor(
  name='ResultsEntry',
  full_name='AddMedicalTest.ResultsEntry',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='key', full_name='AddMedicalTest.ResultsEntry.key', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='AddMedicalTest.ResultsEntry.value', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=445,
  serialized_end=491,
)

_ADDMEDICALTEST = _descriptor.Descriptor(
  name='AddMedicalTest',
  full_name='AddMedicalTest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='doctor', full_name='AddMedicalTest.doctor', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='patient', full_name='AddMedicalTest.patient', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='technican', full_name='AddMedicalTest.technican', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='results', full_name='AddMedicalTest.results', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_ADDMEDICALTEST_RESULTSENTRY, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=539,
  serialized_end=702,
)


_FILTERBYIDREQUEST = _descriptor.Descriptor(
  name='FilterByIdRequest',
  full_name='FilterByIdRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='FilterByIdRequest.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='filterId', full_name='FilterByIdRequest.filterId', index=1,
      number=2, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=704,
  serialized_end=753,
)


_ID = _descriptor.Descriptor(
  name='Id',
  full_name='Id',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='Id.id', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=755,
  serialized_end=771,
)


_STATUS = _descriptor.Descriptor(
  name='Status',
  full_name='Status',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='Status.status', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=773,
  serialized_end=797,
)

_PATIENT.fields_by_name['person'].message_type = _PERSON
_PATIENTS.fields_by_name['patients'].message_type = _PATIENT
_DOCTOR.fields_by_name['person'].message_type = _PERSON
_DOCTORS.fields_by_name['doctors'].message_type = _DOCTOR
_TECHNICAN.fields_by_name['person'].message_type = _PERSON
_TECHNICANS.fields_by_name['technicans'].message_type = _TECHNICAN
_MEDICALTEST_RESULTSENTRY.containing_type = _MEDICALTEST
_MEDICALTEST.fields_by_name['patient'].message_type = _PATIENT
_MEDICALTEST.fields_by_name['doctor'].message_type = _DOCTOR
_MEDICALTEST.fields_by_name['technican'].message_type = _TECHNICAN
_MEDICALTEST.fields_by_name['results'].message_type = _MEDICALTEST_RESULTSENTRY
_MEDICALTESTS.fields_by_name['tests'].message_type = _MEDICALTEST
_ADDMEDICALTEST_RESULTSENTRY.containing_type = _ADDMEDICALTEST
_ADDMEDICALTEST.fields_by_name['results'].message_type = _ADDMEDICALTEST_RESULTSENTRY
DESCRIPTOR.message_types_by_name['Person'] = _PERSON
DESCRIPTOR.message_types_by_name['Patient'] = _PATIENT
DESCRIPTOR.message_types_by_name['Patients'] = _PATIENTS
DESCRIPTOR.message_types_by_name['Doctor'] = _DOCTOR
DESCRIPTOR.message_types_by_name['Doctors'] = _DOCTORS
DESCRIPTOR.message_types_by_name['Technican'] = _TECHNICAN
DESCRIPTOR.message_types_by_name['Technicans'] = _TECHNICANS
DESCRIPTOR.message_types_by_name['MedicalTest'] = _MEDICALTEST
DESCRIPTOR.message_types_by_name['MedicalTests'] = _MEDICALTESTS
DESCRIPTOR.message_types_by_name['AddMedicalTest'] = _ADDMEDICALTEST
DESCRIPTOR.message_types_by_name['FilterByIdRequest'] = _FILTERBYIDREQUEST
DESCRIPTOR.message_types_by_name['Id'] = _ID
DESCRIPTOR.message_types_by_name['Status'] = _STATUS

Person = _reflection.GeneratedProtocolMessageType('Person', (_message.Message,), dict(
  DESCRIPTOR = _PERSON,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Person)
  ))
_sym_db.RegisterMessage(Person)

Patient = _reflection.GeneratedProtocolMessageType('Patient', (_message.Message,), dict(
  DESCRIPTOR = _PATIENT,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Patient)
  ))
_sym_db.RegisterMessage(Patient)

Patients = _reflection.GeneratedProtocolMessageType('Patients', (_message.Message,), dict(
  DESCRIPTOR = _PATIENTS,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Patients)
  ))
_sym_db.RegisterMessage(Patients)

Doctor = _reflection.GeneratedProtocolMessageType('Doctor', (_message.Message,), dict(
  DESCRIPTOR = _DOCTOR,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Doctor)
  ))
_sym_db.RegisterMessage(Doctor)

Doctors = _reflection.GeneratedProtocolMessageType('Doctors', (_message.Message,), dict(
  DESCRIPTOR = _DOCTORS,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Doctors)
  ))
_sym_db.RegisterMessage(Doctors)

Technican = _reflection.GeneratedProtocolMessageType('Technican', (_message.Message,), dict(
  DESCRIPTOR = _TECHNICAN,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Technican)
  ))
_sym_db.RegisterMessage(Technican)

Technicans = _reflection.GeneratedProtocolMessageType('Technicans', (_message.Message,), dict(
  DESCRIPTOR = _TECHNICANS,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Technicans)
  ))
_sym_db.RegisterMessage(Technicans)

MedicalTest = _reflection.GeneratedProtocolMessageType('MedicalTest', (_message.Message,), dict(

  ResultsEntry = _reflection.GeneratedProtocolMessageType('ResultsEntry', (_message.Message,), dict(
    DESCRIPTOR = _MEDICALTEST_RESULTSENTRY,
    __module__ = 'medical_test_pb2'
    # @@protoc_insertion_point(class_scope:MedicalTest.ResultsEntry)
    ))
  ,
  DESCRIPTOR = _MEDICALTEST,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:MedicalTest)
  ))
_sym_db.RegisterMessage(MedicalTest)
_sym_db.RegisterMessage(MedicalTest.ResultsEntry)

MedicalTests = _reflection.GeneratedProtocolMessageType('MedicalTests', (_message.Message,), dict(
  DESCRIPTOR = _MEDICALTESTS,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:MedicalTests)
  ))
_sym_db.RegisterMessage(MedicalTests)

AddMedicalTest = _reflection.GeneratedProtocolMessageType('AddMedicalTest', (_message.Message,), dict(

  ResultsEntry = _reflection.GeneratedProtocolMessageType('ResultsEntry', (_message.Message,), dict(
    DESCRIPTOR = _ADDMEDICALTEST_RESULTSENTRY,
    __module__ = 'medical_test_pb2'
    # @@protoc_insertion_point(class_scope:AddMedicalTest.ResultsEntry)
    ))
  ,
  DESCRIPTOR = _ADDMEDICALTEST,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:AddMedicalTest)
  ))
_sym_db.RegisterMessage(AddMedicalTest)
_sym_db.RegisterMessage(AddMedicalTest.ResultsEntry)

FilterByIdRequest = _reflection.GeneratedProtocolMessageType('FilterByIdRequest', (_message.Message,), dict(
  DESCRIPTOR = _FILTERBYIDREQUEST,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:FilterByIdRequest)
  ))
_sym_db.RegisterMessage(FilterByIdRequest)

Id = _reflection.GeneratedProtocolMessageType('Id', (_message.Message,), dict(
  DESCRIPTOR = _ID,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Id)
  ))
_sym_db.RegisterMessage(Id)

Status = _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), dict(
  DESCRIPTOR = _STATUS,
  __module__ = 'medical_test_pb2'
  # @@protoc_insertion_point(class_scope:Status)
  ))
_sym_db.RegisterMessage(Status)


_MEDICALTEST_RESULTSENTRY.has_options = True
_MEDICALTEST_RESULTSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
_ADDMEDICALTEST_RESULTSENTRY.has_options = True
_ADDMEDICALTEST_RESULTSENTRY._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('8\001'))
try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class PatientServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.FetchAllResults = channel.unary_stream(
          '/PatientService/FetchAllResults',
          request_serializer=Id.SerializeToString,
          response_deserializer=MedicalTests.FromString,
          )
      self.FetchPersonalData = channel.unary_unary(
          '/PatientService/FetchPersonalData',
          request_serializer=Id.SerializeToString,
          response_deserializer=Patient.FromString,
          )


  class PatientServiceServicer(object):

    def FetchAllResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchPersonalData(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_PatientServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'FetchAllResults': grpc.unary_stream_rpc_method_handler(
            servicer.FetchAllResults,
            request_deserializer=Id.FromString,
            response_serializer=MedicalTests.SerializeToString,
        ),
        'FetchPersonalData': grpc.unary_unary_rpc_method_handler(
            servicer.FetchPersonalData,
            request_deserializer=Id.FromString,
            response_serializer=Patient.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'PatientService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class DoctorServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.FetchAllPatients = channel.unary_unary(
          '/DoctorService/FetchAllPatients',
          request_serializer=Id.SerializeToString,
          response_deserializer=Patients.FromString,
          )
      self.FetchPatientsForDoctor = channel.unary_unary(
          '/DoctorService/FetchPatientsForDoctor',
          request_serializer=Id.SerializeToString,
          response_deserializer=Patients.FromString,
          )
      self.FetchResultsWithId = channel.unary_unary(
          '/DoctorService/FetchResultsWithId',
          request_serializer=FilterByIdRequest.SerializeToString,
          response_deserializer=MedicalTest.FromString,
          )


  class DoctorServiceServicer(object):

    def FetchAllPatients(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchPatientsForDoctor(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchResultsWithId(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_DoctorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'FetchAllPatients': grpc.unary_unary_rpc_method_handler(
            servicer.FetchAllPatients,
            request_deserializer=Id.FromString,
            response_serializer=Patients.SerializeToString,
        ),
        'FetchPatientsForDoctor': grpc.unary_unary_rpc_method_handler(
            servicer.FetchPatientsForDoctor,
            request_deserializer=Id.FromString,
            response_serializer=Patients.SerializeToString,
        ),
        'FetchResultsWithId': grpc.unary_unary_rpc_method_handler(
            servicer.FetchResultsWithId,
            request_deserializer=FilterByIdRequest.FromString,
            response_serializer=MedicalTest.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'DoctorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class TechnicanServiceStub(object):

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.AddResults = channel.unary_unary(
          '/TechnicanService/AddResults',
          request_serializer=AddMedicalTest.SerializeToString,
          response_deserializer=Status.FromString,
          )
      self.FetchAllResultsForTechnican = channel.unary_unary(
          '/TechnicanService/FetchAllResultsForTechnican',
          request_serializer=Id.SerializeToString,
          response_deserializer=MedicalTests.FromString,
          )


  class TechnicanServiceServicer(object):

    def AddResults(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchAllResultsForTechnican(self, request, context):
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_TechnicanServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'AddResults': grpc.unary_unary_rpc_method_handler(
            servicer.AddResults,
            request_deserializer=AddMedicalTest.FromString,
            response_serializer=Status.SerializeToString,
        ),
        'FetchAllResultsForTechnican': grpc.unary_unary_rpc_method_handler(
            servicer.FetchAllResultsForTechnican,
            request_deserializer=Id.FromString,
            response_serializer=MedicalTests.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'TechnicanService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaPatientServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchPersonalData(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaPatientServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    def FetchPersonalData(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FetchPersonalData.future = None


  def beta_create_PatientService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('PatientService', 'FetchAllResults'): Id.FromString,
      ('PatientService', 'FetchPersonalData'): Id.FromString,
    }
    response_serializers = {
      ('PatientService', 'FetchAllResults'): MedicalTests.SerializeToString,
      ('PatientService', 'FetchPersonalData'): Patient.SerializeToString,
    }
    method_implementations = {
      ('PatientService', 'FetchAllResults'): face_utilities.unary_stream_inline(servicer.FetchAllResults),
      ('PatientService', 'FetchPersonalData'): face_utilities.unary_unary_inline(servicer.FetchPersonalData),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_PatientService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('PatientService', 'FetchAllResults'): Id.SerializeToString,
      ('PatientService', 'FetchPersonalData'): Id.SerializeToString,
    }
    response_deserializers = {
      ('PatientService', 'FetchAllResults'): MedicalTests.FromString,
      ('PatientService', 'FetchPersonalData'): Patient.FromString,
    }
    cardinalities = {
      'FetchAllResults': cardinality.Cardinality.UNARY_STREAM,
      'FetchPersonalData': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'PatientService', cardinalities, options=stub_options)


  class BetaDoctorServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllPatients(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchPatientsForDoctor(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchResultsWithId(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaDoctorServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def FetchAllPatients(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FetchAllPatients.future = None
    def FetchPatientsForDoctor(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FetchPatientsForDoctor.future = None
    def FetchResultsWithId(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FetchResultsWithId.future = None


  def beta_create_DoctorService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('DoctorService', 'FetchAllPatients'): Id.FromString,
      ('DoctorService', 'FetchPatientsForDoctor'): Id.FromString,
      ('DoctorService', 'FetchResultsWithId'): FilterByIdRequest.FromString,
    }
    response_serializers = {
      ('DoctorService', 'FetchAllPatients'): Patients.SerializeToString,
      ('DoctorService', 'FetchPatientsForDoctor'): Patients.SerializeToString,
      ('DoctorService', 'FetchResultsWithId'): MedicalTest.SerializeToString,
    }
    method_implementations = {
      ('DoctorService', 'FetchAllPatients'): face_utilities.unary_unary_inline(servicer.FetchAllPatients),
      ('DoctorService', 'FetchPatientsForDoctor'): face_utilities.unary_unary_inline(servicer.FetchPatientsForDoctor),
      ('DoctorService', 'FetchResultsWithId'): face_utilities.unary_unary_inline(servicer.FetchResultsWithId),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_DoctorService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('DoctorService', 'FetchAllPatients'): Id.SerializeToString,
      ('DoctorService', 'FetchPatientsForDoctor'): Id.SerializeToString,
      ('DoctorService', 'FetchResultsWithId'): FilterByIdRequest.SerializeToString,
    }
    response_deserializers = {
      ('DoctorService', 'FetchAllPatients'): Patients.FromString,
      ('DoctorService', 'FetchPatientsForDoctor'): Patients.FromString,
      ('DoctorService', 'FetchResultsWithId'): MedicalTest.FromString,
    }
    cardinalities = {
      'FetchAllPatients': cardinality.Cardinality.UNARY_UNARY,
      'FetchPatientsForDoctor': cardinality.Cardinality.UNARY_UNARY,
      'FetchResultsWithId': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'DoctorService', cardinalities, options=stub_options)


  class BetaTechnicanServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResults(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchAllResultsForTechnican(self, request, context):
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaTechnicanServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    def AddResults(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    AddResults.future = None
    def FetchAllResultsForTechnican(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      raise NotImplementedError()
    FetchAllResultsForTechnican.future = None


  def beta_create_TechnicanService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('TechnicanService', 'AddResults'): AddMedicalTest.FromString,
      ('TechnicanService', 'FetchAllResultsForTechnican'): Id.FromString,
    }
    response_serializers = {
      ('TechnicanService', 'AddResults'): Status.SerializeToString,
      ('TechnicanService', 'FetchAllResultsForTechnican'): MedicalTests.SerializeToString,
    }
    method_implementations = {
      ('TechnicanService', 'AddResults'): face_utilities.unary_unary_inline(servicer.AddResults),
      ('TechnicanService', 'FetchAllResultsForTechnican'): face_utilities.unary_unary_inline(servicer.FetchAllResultsForTechnican),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_TechnicanService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('TechnicanService', 'AddResults'): AddMedicalTest.SerializeToString,
      ('TechnicanService', 'FetchAllResultsForTechnican'): Id.SerializeToString,
    }
    response_deserializers = {
      ('TechnicanService', 'AddResults'): Status.FromString,
      ('TechnicanService', 'FetchAllResultsForTechnican'): MedicalTests.FromString,
    }
    cardinalities = {
      'AddResults': cardinality.Cardinality.UNARY_UNARY,
      'FetchAllResultsForTechnican': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'TechnicanService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
