# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import medical_test_pb2 as medical__test__pb2


class PatientServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.FetchAllResults = channel.unary_stream(
        '/PatientService/FetchAllResults',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTests.FromString,
        )
    self.FetchPersonalData = channel.unary_unary(
        '/PatientService/FetchPersonalData',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.Patient.FromString,
        )


class PatientServiceServicer(object):

  def FetchAllResults(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchPersonalData(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PatientServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'FetchAllResults': grpc.unary_stream_rpc_method_handler(
          servicer.FetchAllResults,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.MedicalTests.SerializeToString,
      ),
      'FetchPersonalData': grpc.unary_unary_rpc_method_handler(
          servicer.FetchPersonalData,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.Patient.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'PatientService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class DoctorServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.FetchAllPatients = channel.unary_unary(
        '/DoctorService/FetchAllPatients',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.Patients.FromString,
        )
    self.FetchPatientsForDoctor = channel.unary_unary(
        '/DoctorService/FetchPatientsForDoctor',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.Patients.FromString,
        )
    self.FetchResultsWithId = channel.unary_unary(
        '/DoctorService/FetchResultsWithId',
        request_serializer=medical__test__pb2.FilterByIdRequest.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTest.FromString,
        )


class DoctorServiceServicer(object):

  def FetchAllPatients(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchPatientsForDoctor(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchResultsWithId(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_DoctorServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'FetchAllPatients': grpc.unary_unary_rpc_method_handler(
          servicer.FetchAllPatients,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.Patients.SerializeToString,
      ),
      'FetchPatientsForDoctor': grpc.unary_unary_rpc_method_handler(
          servicer.FetchPatientsForDoctor,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.Patients.SerializeToString,
      ),
      'FetchResultsWithId': grpc.unary_unary_rpc_method_handler(
          servicer.FetchResultsWithId,
          request_deserializer=medical__test__pb2.FilterByIdRequest.FromString,
          response_serializer=medical__test__pb2.MedicalTest.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'DoctorService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class TechnicanServiceStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.AddResults = channel.unary_unary(
        '/TechnicanService/AddResults',
        request_serializer=medical__test__pb2.AddMedicalTest.SerializeToString,
        response_deserializer=medical__test__pb2.Status.FromString,
        )
    self.FetchAllResultsForTechnican = channel.unary_unary(
        '/TechnicanService/FetchAllResultsForTechnican',
        request_serializer=medical__test__pb2.Id.SerializeToString,
        response_deserializer=medical__test__pb2.MedicalTests.FromString,
        )


class TechnicanServiceServicer(object):

  def AddResults(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchAllResultsForTechnican(self, request, context):
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TechnicanServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'AddResults': grpc.unary_unary_rpc_method_handler(
          servicer.AddResults,
          request_deserializer=medical__test__pb2.AddMedicalTest.FromString,
          response_serializer=medical__test__pb2.Status.SerializeToString,
      ),
      'FetchAllResultsForTechnican': grpc.unary_unary_rpc_method_handler(
          servicer.FetchAllResultsForTechnican,
          request_deserializer=medical__test__pb2.Id.FromString,
          response_serializer=medical__test__pb2.MedicalTests.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'TechnicanService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
